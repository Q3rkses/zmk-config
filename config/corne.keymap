/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
    /* ──────────────── Macros for Layer 3 ───────────────── */
    macros {
        /* Shifted keys (always send Shift + key) */
        shifted_minus: macro { sequence = < &kp LSHFT &kp MINUS >; };
        shifted_equal: macro { sequence = < &kp LSHFT &kp EQUAL >; };
        shifted_lbrace: macro { sequence = < &kp LSHFT &kp LBRACE >; };
        shifted_rbrace: macro { sequence = < &kp LSHFT &kp RBRACE >; };
        shifted_bslash: macro { sequence = < &kp LSHFT &kp BSLH >; };
        shifted_grave: macro { sequence = < &kp LSHFT &kp GRAVE >; };
        shifted_fslh:  macro { sequence = < &kp LSHFT &kp FSLH  >; };
        /* Control + arrow (jump words) */
        longjmp_left:  macro { sequence = < &kp LCTRL &kp LEFT  >; };
        longjmp_down:  macro { sequence = < &kp LCTRL &kp DOWN  >; };
        longjmp_up:    macro { sequence = < &kp LCTRL &kp UP    >; };
        longjmp_right: macro { sequence = < &kp LCTRL &kp RIGHT >; };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {  /* Layer 0: Base */
// -----------------------------------------------------------------------------------------
            bindings = <
  &kp TAB      &kp Q    &kp W    &kp E    &kp R    &kp T    &kp Y    &kp U    &kp I    &kp O    &kp P    &kp ESC
  &kp LCTRL    &kp A    &kp S    &kp D    &kp F    &kp G    &kp H    &kp J    &kp K    &kp L    &kp SEMI &kp SQT
  &kp LSHFT    &kp Z    &kp X    &kp C    &kp V    &kp B    &kp N    &kp M    &kp COMMA &kp DOT  &kp FSLH &kp LALT
                         &kp LGUI &mo 1   &kp SPACE &kp RET  &mo 2   &kp BSPC
            >;
        };

        lower_layer {  /* Layer 1: Num + Func */
// -----------------------------------------------------------------------------------------
            bindings = <
  &kp TAB      &kp N1   &kp N2   &kp N3   &kp N4   &kp N5   &kp N6   &kp N7   &kp N8   &kp N9   &kp N0   &kp ESC
  &kp LCTRL    &trans   &trans   &trans   &trans   &trans   &kp LEFT &kp DOWN &kp UP    &kp RIGHT &trans   &trans
  &kp LSHFT    &kp F1   &kp F2   &kp F3   &kp F4   &kp F5   &kp F6   &kp F7   &kp F8   &kp F9   &kp F10  &kp LALT
                         &kp LGUI &trans &kp SPACE &kp RET  &trans &kp BSPC
            >;
        };

        raise_layer {  /* Layer 2: Shifted symbols */
// -----------------------------------------------------------------------------------------
            bindings = <
  &kp TAB      &kp EXCL &kp AT   &kp HASH &kp DLLR &kp PRCNT &kp CARET &kp AMPS  &kp ASTRK &kp LPAR  &kp RPAR  &kp BSPC
  &kp LCTRL    &trans   &trans   &trans   &trans   &trans   &kp MINUS &kp EQUAL &kp LBKT  &kp RBKT  &kp BSLH  &kp GRAVE
  &kp LSHFT    &trans   &trans   &trans   &trans   &trans   &kp UNDER &kp PLUS  &kp LBRACE &kp RBRACE &kp PIPE  &kp TILDE
                         &kp LGUI &trans &kp SPACE &kp RET  &trans &kp RALT
            >;
        };

        longjmp_layer {  /* Layer 3: longjmp */
// -----------------------------------------------------------------------------------------
            bindings = <
  &kp TAB        &kp N1            &kp N2            &kp N3            &kp N4            &kp N5
  &kp LCTRL      &mac shifted_minus &mac shifted_equal &mac shifted_lbrace &mac shifted_rbrace &mac shifted_bslash
  &mac longjmp_left &mac longjmp_down &mac longjmp_up   &mac longjmp_right &kp N0            &kp ESC
  &kp LSHFT      &mac shifted_minus &mac shifted_equal &mac shifted_lbrace &mac shifted_rbrace &mac shifted_bslash
  &mac shifted_grave &mac shifted_grave &mac shifted_fslh &mac shifted_fslh &trans            &kp LALT
                         &kp LGUI &mo 3 &kp SPACE &kp RET &trans &kp BSPC
            >;
        };
    };
};
